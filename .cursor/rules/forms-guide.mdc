---
description:
globs:
alwaysApply: false
---

You are tasked with creating a React form based on a Figma design and user specifications. Follow these instructions carefully to complete the task:

1. Review the following inputs:
   <figma_link_or_image>
   {{FIGMA_LINK_OR_IMAGE}}
   </figma_link_or_image>

<user_prompt>
{{USER_PROMPT}}
</user_prompt>

2. Analyze the Figma link Or Image to understand the visual design and layout of the form. Pay attention to the input fields, their types, and any specific UI components used.

3. Follow these guidelines while building the form:

   - Use react-hook-form for form management
   - Implement validations using the Zod schema defined in the domain
   - Utilize form builder components from @form-builder.tsx
   - Form components should come from shad cn

4. When handling async data in forms, use the following pattern:

   ```typescript
   const { data } = useGetData();
   const form = useForm({
     defaultValues: {
       // Initial empty state
       field1: "",
       field2: false,
     },
   });

   useEffect(() => {
     if (data) {
       form.reset({
         field1: data.field1,
         field2: data.field2,
         // ... transform or map data as needed
       });
     }
   }, [data, form]);
   ```

5. When handling multiple data dependencies for form initialization, follow this pattern, this ensures that the needed in the form (e.g: select inputs or radio buttons) is loaded before initialazing the form:

   ```typescript
   // Fetch all required data
   const { data: mainData, isLoading: isMainDataLoading } = useGetMainData();
   const { data: dependentData1, isLoading: isDependent1Loading } =
     useGetDependentData1();
   const { data: dependentData2, isLoading: isDependent2Loading } =
     useGetDependentData2();

   // Combine loading states
   const isLoading =
     isMainDataLoading || isDependent1Loading || isDependent2Loading;

   const form = useForm({
     defaultValues: {
       // Initial empty state
       field1: "",
       field2: "",
       field3: false,
     },
   });

   // Wait for all data to be available before initializing the form
   useEffect(() => {
     if (isLoading || !mainData) return;

     form.reset({
       field1: mainData.field1,
       field2: dependentData1?.someField,
       field3: dependentData2?.anotherField,
       // ... transform or map data as needed
     });
   }, [mainData, form, isLoading]);

   // Use isLoading to disable form controls
   return (
     <Form {...form}>
       <form onSubmit={form.handleSubmit(onSubmit)}>
         <FormField
           control={form.control}
           name="field1"
           render={({ field }) => (
             <FormItem>
               <FormLabel>Field 1</FormLabel>
               <FormControl>
                 <Input disabled={isLoading} {...field} />
               </FormControl>
             </FormItem>
           )}
         />
         {/* ... other form fields */}
         <Button type="submit" disabled={isLoading}>
           {isLoading ? "Loading..." : "Submit"}
         </Button>
       </form>
     </Form>
   );
   ```

6. **Handling Numeric Fields with Zod**: When working with form fields that are defined as numeric types in your Zod schema but need to work with HTML form controls (which typically handle strings), you need to handle the conversion between strings and numbers:

   **For Select components with numeric values:**

   ```typescript
   <FormField
     control={form.control}
     name="numericFieldId" // This field is defined as z.number() in schema
     render={({ field }) => (
       <FormItem>
         <FormLabel>Select Numeric Value</FormLabel>
         <Select
           onValueChange={(value: string) => field.onChange(Number(value))} // Convert string to number
           value={String(field.value)} // Convert number to string for display
           disabled={isLoading}
         >
           <FormControl>
             <SelectTrigger>
               <SelectValue placeholder="Select an option" />
             </SelectTrigger>
           </FormControl>
           <SelectContent>
             {options?.map((option) => (
               <SelectItem key={option.id} value={String(option.id)}>
                 {option.name}
               </SelectItem>
             ))}
           </SelectContent>
         </Select>
         <FormMessage />
       </FormItem>
     )}
   />
   ```

   **For Input components with numeric values:**

   ```typescript
   <FormField
     control={form.control}
     name="numericField" // This field is defined as z.number() in schema
     render={({ field }) => (
       <FormItem>
         <FormLabel>Numeric Input</FormLabel>
         <FormControl>
           <Input
             type="number"
             placeholder="Enter a number"
             {...field}
             value={String(field.value)} // Convert number to string for display
             onChange={(e) => field.onChange(Number(e.target.value))} // Convert string to number
             disabled={isLoading}
           />
         </FormControl>
         <FormMessage />
       </FormItem>
     )}
   />
   ```

   **For RadioGroup components with numeric values:**

   ```typescript
   <FormField
     control={form.control}
     name="numericRadioField" // This field is defined as z.number() in schema
     render={({ field }) => (
       <FormItem>
         <FormLabel>Choose an Option</FormLabel>
         <FormControl>
           <RadioGroup
             onValueChange={(value: string) => field.onChange(Number(value))} // Convert string to number
             value={String(field.value)} // Convert number to string for display
             disabled={isLoading}
           >
             {options?.map((option) => (
               <FormItem key={option.id} className="flex items-center gap-2">
                 <FormControl>
                   <RadioGroupItem value={String(option.id)} />
                 </FormControl>
                 <FormLabel>{option.name}</FormLabel>
               </FormItem>
             ))}
           </RadioGroup>
         </FormControl>
         <FormMessage />
       </FormItem>
     )}
   />
   ```

7. Take this example as a guide, to build a complete form:

```typescript
"use client";

import { Button } from "@/shared/components/ui/button";
import { Input } from "@/shared/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/shared/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/shared/components/ui/radio-group";
import { Switch } from "@/shared/components/ui/switch";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/shared/components/ui/form";
import { userProfileSchema, type UserProfile } from "../domain/user";
import saveProfile from "../services/save-profile";
import { ResultPattern } from "@/shared/domain/result-pattern";

export const ProfileForm = () => {
  const form = useForm<UserProfile>({
    resolver: zodResolver(userProfileSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
      age: "",
      emailNotifications: true,
      smsNotifications: false,
      marketingEmails: false,
    },
    mode: "onChange", // Enable real-time validation
  });

  const onSubmit = async (values: UserProfile) => {
    const result = await saveProfile(values);

    if (!result.success) {
      console.error("Failed to save profile:", result.error); // Do something with the error upto the user
      return;
    }

    if (result.success) {
      // Handle success - you could add a toast notification here
      console.log("Profile updated successfully:", result.data); // Do something with the successful response up to the user
    }
  };

  const { isSubmitting } = form.formState;

  return (
    <div className="py-8">
      <div className="mx-auto max-w-2xl">
        <div className="mb-6 space-y-2">
          <h1 className="text-heading-lg font-noto-sans text-system-neutral-900">
            Profile Settings
          </h1>
          <p className="text-body-md text-system-neutral-600">
            Update your profile information and notification preferences. All
            fields marked with * are required.
          </p>
        </div>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            {/* Personal Information Section */}
            <div className="space-y-4">
              <h3 className="text-heading-md font-noto-sans text-system-neutral-800">
                Personal Information
              </h3>

              <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                <FormField
                  control={form.control}
                  name="firstName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>First Name *</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter your first name" {...field} />
                      </FormControl>
                      <FormDescription>
                        This is your first name as it will appear on your
                        profile.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="lastName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Last Name *</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter your last name" {...field} />
                      </FormControl>
                      <FormDescription>
                        This is your last name as it will appear on your
                        profile.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email Address *</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="Enter your email address"
                        type="email"
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      We'll use this email to send you important updates and
                      notifications.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                <FormField
                  control={form.control}
                  name="age"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Age *</FormLabel>
                      <FormControl>
                        <Input
                          placeholder="Enter your age"
                          type="number"
                          min="18"
                          max="120"
                          {...field}
                        />
                      </FormControl>
                      <FormDescription>
                        You must be at least 18 years old to use this service.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="country"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Country *</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select your country" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="us">United States</SelectItem>
                          <SelectItem value="ca">Canada</SelectItem>
                          <SelectItem value="uk">United Kingdom</SelectItem>
                          <SelectItem value="au">Australia</SelectItem>
                          <SelectItem value="de">Germany</SelectItem>
                          <SelectItem value="fr">France</SelectItem>
                          <SelectItem value="jp">Japan</SelectItem>
                          <SelectItem value="br">Brazil</SelectItem>
                          <SelectItem value="in">India</SelectItem>
                          <SelectItem value="other">Other</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        Select the country where you currently reside.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="gender"
                render={({ field }) => (
                  <FormItem className="space-y-3">
                    <FormLabel>Gender *</FormLabel>
                    <FormControl>
                      <RadioGroup
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                        className="flex flex-col space-y-1"
                      >
                        <FormItem className="flex items-center space-x-3 space-y-0">
                          <FormControl>
                            <RadioGroupItem value="male" />
                          </FormControl>
                          <FormLabel>Male</FormLabel>
                        </FormItem>
                        <FormItem className="flex items-center space-x-3 space-y-0">
                          <FormControl>
                            <RadioGroupItem value="female" />
                          </FormControl>
                          <FormLabel>Female</FormLabel>
                        </FormItem>
                        <FormItem className="flex items-center space-x-3 space-y-0">
                          <FormControl>
                            <RadioGroupItem value="other" />
                          </FormControl>
                          <FormLabel>Other</FormLabel>
                        </FormItem>
                        <FormItem className="flex items-center space-x-3 space-y-0">
                          <FormControl>
                            <RadioGroupItem value="prefer-not-to-say" />
                          </FormControl>
                          <FormLabel>Prefer not to say</FormLabel>
                        </FormItem>
                      </RadioGroup>
                    </FormControl>
                    <FormDescription>
                      This information helps us personalize your experience.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {/* Notification Preferences Section */}
            <div className="space-y-4">
              <div>
                <h3 className="text-heading-md font-noto-sans text-system-neutral-800">
                  Notification Preferences
                </h3>
                <p className="text-body-sm text-system-neutral-600">
                  Choose how you'd like to receive notifications from us.
                </p>
              </div>

              <FormField
                control={form.control}
                name="emailNotifications"
                render={({ field }) => (
                  <FormItem className="border-system-neutral-200 bg-system-neutral-0 flex flex-row items-center justify-between rounded-lg border p-4">
                    <div className="space-y-0.5">
                      <FormLabel>Email Notifications</FormLabel>
                      <FormDescription>
                        Receive notifications about your account activity via
                        email.
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                        aria-describedby="email-notifications-description"
                      />
                    </FormControl>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="smsNotifications"
                render={({ field }) => (
                  <FormItem className="border-system-neutral-200 bg-system-neutral-0 flex flex-row items-center justify-between rounded-lg border p-4">
                    <div className="space-y-0.5">
                      <FormLabel>SMS Notifications</FormLabel>
                      <FormDescription>
                        Receive important security alerts and updates via SMS.
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                        aria-describedby="sms-notifications-description"
                      />
                    </FormControl>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="marketingEmails"
                render={({ field }) => (
                  <FormItem className="border-system-neutral-200 bg-system-neutral-0 flex flex-row items-center justify-between rounded-lg border p-4">
                    <div className="space-y-0.5">
                      <FormLabel>Marketing Emails</FormLabel>
                      <FormDescription>
                        Receive emails about new products, features, and special
                        offers.
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                        aria-describedby="marketing-emails-description"
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
            </div>

            <Button type="submit" className="w-full" disabled={isSubmitting}>
              {isSubmitting ? "Updating Profile..." : "Update Profile"}
            </Button>
          </form>
        </Form>
      </div>
    </div>
  );
};
```
