---
description:
globs:
alwaysApply: false
---

## SWR Data Fetching Hook Pattern

To create a new SWR hook for fetching data in the app, follow these guidelines:

1. **Import SWR and dependencies**: Import `useSWR` from 'swr', the relevant domain types, endpoint definitions, and the fetcher/service function.
2. **Hook signature**: Export a function named `useGetX` (replace `X` with the entity name), accepting the required identifier(s) as parameters.
3. **Conditional fetching**: Define a `shouldFetch` variable to determine if the hook should trigger a fetch (e.g., check if the ID is not null or undefined), only do this if the fetcher depends on a uniquer value like an id.
4. **SWR usage**:
   - Use `useSWR` with a key generated by a path utility (e.g., `pathParams`) if `shouldFetch` is true, otherwise pass `null` to disable fetching.
   - Pass a fetcher function that calls the appropriate service/fetcher with the required parameters.
5. **Return value**: Return the SWR response object directly from the hook.

**Example skeleton:**

```ts
import useSWR from "swr";
import { Entity } from "../domain/entity";
import endpoints from "../services/endpoints";
import pathParams from "@/shared/services/path-params";
import getEntity from "../services/get-entity";

export const useGetEntity = (entityId?: Entity["id"]) => {
  const shouldFetch = entityId !== null;

  const response = useSWR(
    shouldFetch
      ? pathParams(endpoints.getEntity, { entityId: String(entityId) })
      : null,
    () => getEntity(entityId!)
  );

  return response;
};
```

- Always ensure the fetcher is only called when the required parameter(s) are present.
- Use the same naming and structure conventions for consistency across the codebase.
